#!/bin/sh
#
# Check for ruby style errors

red='\033[0;31m'
green='\033[0;32m'
yellow='\033[0;33m'
NC='\033[0m'

if git rev-parse --verify HEAD >/dev/null 2>&1
then
  against=HEAD
else
  # Initial commit: diff against an empty tree object
  # Change it to match your initial commit sha
  against=123acdac4c698f24f2352cf34c3b12e246b48af1
fi

# Get only the staged files
RB_FILES="$(git diff --cached --name-only --diff-filter=AMC | grep "\.rb$" | tr '\n' ' ')"

echo "${green}[Ruby Style][Info]: Checking Ruby Style${NC}"

if [ -n "$RB_FILES" ]
then
  echo "${green}[Ruby Style][Info]: ${RB_FILES}${NC}"

  if [ ! -f '.rubocop.yml' ]; then
    echo "${yellow}[Ruby Style][Warning]: No .rubocop.yml config file.${NC}"
  fi

  # Run rubocop on the staged ruby files
  rubocop ${RB_FILES}

  if [ $? -ne 0 ]; then
    echo "${red}[Ruby Style][Error]: Fix the issues and commit again${NC}"
    exit 1
  fi
else
  echo "${green}[Ruby Style][Info]: No ruby files to check${NC}"
fi

echo "${green}[Ruby Style][Info]: Checking JS Style${NC}"

# Get only the staged files
JS_FILES="$(git diff --cached --name-only --diff-filter=AMC | grep "\.js[x]*$" | tr '\n' ' ')"

if [ -n "$JS_FILES" ]
then
  echo "${green}[JS Style][Info]: ${JS_FILES}${NC}"

  # Run rubocop on the staged ruby files
  eslint ${JS_FILES}

  if [ $? -ne 0 ]; then
    echo "${red}[JS Style][Error]: Fix the issues and commit again${NC}"
    exit 1
  fi
else
  echo "${green}[JS Style][Info]: No JS files to check${NC}"
fi

exit 0
